type Mutation {
  "쿠키를 굽는다."
  bakeCookie(key: NonEmptyString, value: String): Void
  """
  Deletes a pet

  Equivalent to DELETE /pet/{petId}
  """
  deletePet(
    apiKey: String
    """
    Pet id to delete
    """
    petId: BigInt!
  ): String
  """
  For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors

  Equivalent to DELETE /store/order/{orderId}
  """
  deleteStoreOrder(
    """
    ID of the order that needs to be deleted
    """
    orderId: BigInt!
  ): String
  """
  This can only be done by the logged in user.

  Equivalent to DELETE /user/{username}
  """
  deleteUser(
    """
    The name that needs to be deleted
    """
    username: String!
  ): String
  """
  Add a new pet to the store

  Equivalent to POST /pet
  """
  postPet(requestBody: PetInput!): String
  """
  uploads an image

  Equivalent to POST /pet/{petId}/uploadImage
  """
  postPetUploadImage(
    """
    ID of pet to update
    """
    petId: BigInt!
    requestBody: PetUploadImageInput
  ): ApiResponse
  """
  Place an order for a pet

  Equivalent to POST /store/order
  """
  postStoreOrder(requestBody: OrderInput!): Order
  """
  This can only be done by the logged in user.

  Equivalent to POST /user
  """
  postUser(requestBody: UserInput!): String
  """
  Creates list of users with given input array

  Equivalent to POST /user/createWithArray
  """
  postUserCreateWithArray(requestBody: [UserInput]!): String
  """
  Creates list of users with given input array

  Equivalent to POST /user/createWithList
  """
  postUserCreateWithList(requestBody: [UserInput]!): String
  """
  Update an existing pet

  Equivalent to PUT /pet
  """
  putPet(requestBody: PetInput!): String
  """
  This can only be done by the logged in user.

  Equivalent to PUT /user/{username}
  """
  putUser(
    requestBody: UserInput!
    """
    name that need to be updated
    """
    username: String!
  ): String
}

type Query {
  """
  Returns a single pet

  Equivalent to GET /pet/{petId}
  """
  pet(
    """
    ID of pet to return
    """
    petId: BigInt!
  ): Pet
  """
  Multiple status values can be provided with comma separated strings

  Equivalent to GET /pet/findByStatus
  """
  petFindByStatus(
    """
    Status values that need to be considered for filter
    """
    status: [Status3ListItem]!
  ): [Pet]
  """
  Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

  Equivalent to GET /pet/findByTags
  """
  petFindByTags(
    """
    Tags to filter by
    """
    tags: [String]!
  ): [Pet] @deprecated
  """
  Returns a map of status codes to quantities

  Equivalent to GET /store/inventory
  """
  storeInventory: JSON
  """
  For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions

  Equivalent to GET /store/order/{orderId}
  """
  storeOrder(
    """
    ID of pet that needs to be fetched
    """
    orderId: BigInt!
  ): Order
  """
  Get user by user name

  Equivalent to GET /user/{username}
  """
  user(
    """
    The name that needs to be fetched. Use user1 for testing.
    """
    username: String!
  ): User
  """
  Logs user into the system

  Equivalent to GET /user/login
  """
  userLogin(
    """
    The password for login in clear text
    """
    password: String!
    """
    The user name for login
    """
    username: String!
  ): String
  """
  Logs out current logged in user session

  Equivalent to GET /user/logout
  """
  userLogout: String
}

type Pet {
  category: Category
  id: BigInt
  name: String!
  photoUrls: [String]!
  """
  pet status in the store
  """
  status: Status
}

type Category {
  id: BigInt
  name: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

enum Status {
  available
  pending
  sold
}

enum Status3ListItem {
  available
  pending
  sold
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Order {
  complete: Boolean
  id: BigInt
  petId: BigInt
  quantity: Int
  shipDate: String
  """
  Order Status
  """
  status: Status2
}

enum Status2 {
  placed
  approved
  delivered
}

type User {
  email: String
  firstName: String
  id: BigInt
  lastName: String
  password: String
  phone: String
  """
  User Status
  """
  userStatus: Int
  username: String
}

input PetInput {
  category: CategoryInput
  id: BigInt
  name: String!
  photoUrls: [String]!
  """
  pet status in the store
  """
  status: Status
}

input CategoryInput {
  id: BigInt
  name: String
}

type ApiResponse {
  code: Int
  message: String
  type: String
}

input PetUploadImageInput {
  """
  Additional data to pass to server
  """
  additionalMetadata: String
  """
  file to upload
  """
  file: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input OrderInput {
  complete: Boolean
  id: BigInt
  petId: BigInt
  quantity: Int
  shipDate: String
  """
  Order Status
  """
  status: Status2
}

input UserInput {
  email: String
  firstName: String
  id: BigInt
  lastName: String
  password: String
  phone: String
  """
  User Status
  """
  userStatus: Int
  username: String
}

scalar Date

scalar Time

scalar DateTime

scalar DateTimeISO

scalar Timestamp

scalar TimeZone

scalar UtcOffset

scalar Duration

scalar ISO8601Duration

scalar LocalDate

scalar LocalTime

scalar LocalDateTime

scalar LocalEndTime

scalar EmailAddress

scalar NegativeFloat

scalar NegativeInt

scalar NonEmptyString

scalar NonNegativeFloat

scalar NonNegativeInt

scalar NonPositiveFloat

scalar NonPositiveInt

scalar PhoneNumber

scalar PositiveFloat

scalar PositiveInt

scalar PostalCode

scalar UnsignedFloat

scalar UnsignedInt

scalar URL

scalar Long

scalar Byte

scalar UUID

scalar GUID

scalar Hexadecimal

scalar HexColorCode

scalar HSL

scalar HSLA

scalar IP

scalar IPv4

scalar IPv6

scalar ISBN

scalar JWT

scalar Latitude

scalar Longitude

scalar MAC

scalar Port

scalar RGB

scalar RGBA

scalar SafeInt

scalar USCurrency

scalar Currency

scalar JSONObject

scalar IBAN

scalar ObjectID

scalar Void

scalar DID

scalar CountryCode

scalar Locale

scalar RoutingNumber

scalar AccountNumber

scalar Cuid

scalar SemVer

scalar DeweyDecimal

scalar LCCSubclass

scalar IPCPatent

schema {
  query: Query
  mutation: Mutation
}
